#!/usr/bin/env python

from config.config_reader import cfg
from aws_api_connections import get_vpc_connection_obj


def get_region_non_default_vpc():
    # get the non-default VPC object from AWS (default VPC is generated by amazon and is pu)
    vpc_conn = get_vpc_connection_obj()

    vpcs = vpc_conn.get_all_vpcs()
    print "list of vpc id's returned from region %s:  %s" % (cfg['aws_region'], vpcs)
    for vpc in vpcs:
        if not vpc.is_default:
            print "%s is the first non-default VPC!!" % vpc.id
            return vpc

    raise Exception('ERROR! non-default VPC was not discovered in region')


def get_vpc_subnets():
    vpc_conn = get_vpc_connection_obj()
    vpc_obj = get_region_non_default_vpc()

    subnet_ids = []
    subnets = vpc_conn.get_all_subnets()
    for subnet in subnets:
        if subnet.vpc_id == vpc_obj.id:
            print 'adding to subnet group: %s %s %s' % (subnet.id, subnet.cidr_block, subnet.availability_zone)
            subnet_ids.append(subnet.id)

    return subnet_ids


def get_security_group(sg_name):
    vpc_conn = get_vpc_connection_obj()

    for group in vpc_conn.get_all_security_groups():
        if group.name == sg_name:
            return group

    return None